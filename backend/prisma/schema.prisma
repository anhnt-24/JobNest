generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  password    String
  role        Role
  active      Boolean   @default(true)
  verified   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt  @default(now())

  candidate Candidate?
  company          Company?
  employer          Employer?
  savedJobs        SavedJob[]
  notifications Notification[]  
  conversations  UserConversation[]
  messages       Message[]
} 

enum Role {
  CANDIDATE
  EMPLOYER
  ADMIN
  COMPANY
}

model Candidate {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int      @unique
  phone       String?
  avatarUrl   String?
  name        String
  dob         DateTime?
  gender      Gender?
  cvs         CV[]   
  following CandidateFollower[] 
  applications     Application[]
}

model Employer {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  company         Company   @relation(fields: [companyId], references: [id])
  companyId       Int
  name      String
  phone     String
  avatarUrl String?
  gender      Gender
  dob    DateTime
  address String
  position String
  employeeId String @unique
  createdAt DateTime @default(now())
  updatedAt   DateTime  @updatedAt  @default(now())
  jobs      Job[]
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum CVType {
  UPLOADED   
  GENERATED  
}

enum CVFormat {
  PDF
  DOCX
  PNG
  JPG
  OTHER
}

model CV {
  id           Int        @id @default(autoincrement())
  candidate    Candidate  @relation(fields: [candidateId], references: [id])
  candidateId  Int

  title        String
  type         CVType     @default(UPLOADED)

  fileUrl      String?       
  thumbnailUrl String?       
  format       CVFormat?     
  fileSize     Int?          

  template     Template?  @relation(fields: [templateId], references: [id])
  templateId   Int?    
  content  Json?         
  
  applications Application[] 

  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([candidateId])    
}

model Template {
  id        Int      @id @default(autoincrement())
  name      String  
  description String?
  contentJson Json  
  cvs       CV[]   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Industry {
  id       Int      @id @default(autoincrement())
  name     String
  companies Company[]
}


model Company {
  id            Int      @id @default(autoincrement())
  name          String
  website       String?
  employeeCount Int?     

  industry   Industry? @relation(fields: [industryId], references: [id])
  industryId Int?                   
  
  description   String?                     
  phone       String?
  avatarUrl   String?
  address      String?                     
  addressDetail String?   
  taxCode       String?  

  latitude      Float?                      
  longitude     Float?                      
  followers    CandidateFollower[] 
  coverUrl       String?                     
  userId    Int   @unique
  user      User  @relation(fields: [userId], references: [id])
  employers      Employer[]
  jobs          Job[]
}

model CandidateFollower {
  id          Int       @id @default(autoincrement())
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId Int
  company     Company   @relation(fields: [companyId], references: [id])
  companyId   Int

  createdAt   DateTime  @default(now())

  @@unique([candidateId, companyId]) 
}



enum JobLevel {
  INTERN
  FRESHER
  JUNIOR
  MID
  SENIOR
  MANAGER
  DIRECTOR
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  FREELANCE
  INTERNSHIP
}

enum EducationLevel {
  NONE
  HIGH_SCHOOL
  COLLEGE
  BACHELOR
  MASTER
  DOCTORATE
}
enum JobStatus {
  OPEN
  CLOSED
  PAUSED
}

enum ExperienceLevel {
  NONE       
  SIX_MONTH   
  ONE_TWO_YEARS
  TWO_THREE_YEARS
  THREE_FIVE_YEARS
  FIVE_PLUS
}



model Category {
  id    Int    @id @default(autoincrement())
  name  String
  jobs  Job[]
}


model Job {
  id              Int       @id @default(autoincrement())
  title           String 
  description     String                         
  requirements    String?

  benefits        String?                        
  workingAddress  String?                        
  workingTime     String?                        
  applicationMethod   String?                        

  salary          String?                           
  experience      ExperienceLevel @default(NONE)                        
  quantity        Int?                           
  level           JobLevel                       
  education       EducationLevel?                
  type              JobType  
  categoryId  Int?
  category    Category? @relation(fields: [categoryId], references: [id])                      
  
  mustSkills  String[]  @default([])  // required skills
  niceSkills  String[]  @default([])  // optional skills
  areaTags    String[]  @default([])                        

  deadline        DateTime?                     
  status  JobStatus @default(OPEN) 
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt @default(now())

  company         Company   @relation(fields: [companyId], references: [id])
  employerId     Int?
  employer         Employer?   @relation(fields: [employerId], references: [id])

  companyId       Int
  applications    Application[]
  savedBy         SavedJob[]
}


model Application {
  id           Int        @id @default(autoincrement())
  
  candidate    Candidate  @relation(fields: [candidateId], references: [id])
  candidateId  Int
  
  job          Job        @relation(fields: [jobId], references: [id])
  jobId        Int

  cvId         Int
  cv           CV         @relation(fields: [cvId], references: [id])

  message      String?
  appliedAt    DateTime   @default(now())
  status       ApplicationStatus @default(PENDING)
  conversation Conversation?
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  ACCEPTED
  REJECTED
}

model SavedJob {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  job       Job      @relation(fields: [jobId], references: [id])
  jobId     Int
  savedAt   DateTime @default(now())
  @@unique([userId, jobId]) 
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  title     String
  body      String
  createdAt DateTime @default(now())
}

model Conversation {
  id         Int                 @id @default(autoincrement())
  createdAt  DateTime            @default(now())
  users      UserConversation[]
  messages   Message[]

  applicationId Int? @unique
  application   Application? @relation(fields: [applicationId], references: [id])

}

model UserConversation {
  id              Int           @id @default(autoincrement())
  userId          Int
  conversationId  Int
  user            User          @relation(fields: [userId], references: [id])
  conversation    Conversation  @relation(fields: [conversationId], references: [id])
}

model Message {
  id             String        @id @default(cuid())
  senderId       Int
  conversationId Int
  content        String
  createdAt      DateTime      @default(now())
  
  sender         User          @relation(fields: [senderId], references: [id])
  conversation   Conversation  @relation(fields: [conversationId], references: [id])
}

model Post {
  id          Int      @id @default(autoincrement())
  author      String
  title       String
  slug        String   @unique
  excerpt     String?
  content     String
  thumbnail   String?
  tags        String[]
  category    String?
  status      PostStatus @default(DRAFT)
  views       Int      @default(0)
  likes       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime?
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}
